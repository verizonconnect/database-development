version: '3'

services:
    container:
        build: ${image}
        container_name: ${container_name}
        environment:
            - POSTGRES_USERNAME=${user}
            - POSTGRES_PASSWORD=${password}
        ports:
            - ${host_port}:5432
        volumes: 
            - ./init/create_database.sql:/docker-entrypoint-initdb.d/create_database.sql
        restart: always
        healthcheck:
            test: ["CMD-SHELL", "psql -U ${user} -c 'SELECT 1' || exit 1"]
            interval: 5s
            retries: 5
            start_period: 10s
            timeout: 3s
    #lint:
    #    image: ${sqlfluff_image}
    #    command: lint --write-output /lint/sqlfluff.output
    #    volumes:
    #        - ./src/:/sql
    #        - ./lint/:/lint/
    #    depends_on:
    #        container:
    #            condition: service_healthy
    flyway:
        image: ${flyway_image}
        command: migrate
        environment:
            - FLYWAY_URL=jdbc:postgresql://${container_name}:${host_port}/${database_name}
            - FLYWAY_USER=${user}
            - FLYWAY_PASSWORD=${password}
            - FLYWAY_DEFAULT_SCHEMA=${default_schema}
            - FLYWAY_SQL_MIGRATION_PREFIX=${sql_migration_prefix}
            - FLYWAY_REPEATABLE_SQL_MIGRATION_PREFIX=${repeatable_sql_migration_prefix}
            - FLYWAY_MIXED=${mixed}
            - FLYWAY_PLACEHOLDERS_environment_name=${environment_name}
        volumes:
            - ./src/:/flyway/sql
        depends_on:
            #lint:
            #    condition: "service_completed_successfully"
            container:
                condition: service_healthy
    unit_test:
        build: ${image}
        environment:
            - POSTGRES_USERNAME=${user}
            - POSTGRES_PASSWORD=${password}
            - PGPASSWORD=${password}
        volumes:
            - ./test/:/test_cases
        depends_on:
            flyway:
                condition: "service_completed_successfully"
        command: pg_prove --nocount --nocolor --host ${container_name} --username ${user} --port ${host_port} --dbname ${database_name} --ext .sql --recurse --failures /test_cases/
    #code.coverage:
    #    build: ${image}
    #    volumes:
    #      - ./coverage:/opt/coverage
    #    depends_on:
    #        unit_test:
    #            condition: "service_completed_successfully"
    #    command: dotnet /opt/sqlcover/SQLServerCoverageCore.dll -c Get-CoverTSql -d ${database_name} -t ${coverage_timeout} -q "${coverage_command}" -e Export-Html -o "/opt/coverage" -k "Server=${container_name};User Id=${user};Password=${password};"
    # Example post deployment processing
    #unit_test.test_results:
    #    build: ${image}
    #    depends_on:
    #        code.coverage:
    #            condition: "service_completed_successfully"
    #    command: /opt/mssql-tools/bin/sqlcmd -S sqlserver -U ${user} -P ${password} -d ${database_name} -Q "SELECT SUM(CASE WHEN Result = 'Success' THEN 1 ELSE 0 END) AS Success, SUM(CASE WHEN Result = 'Failure' THEN 1 ELSE 0 END) AS Failure, SUM(CASE WHEN Result = 'Error' THEN 1 ELSE 0 END) AS Error FROM tSQLt.TestResult;"

