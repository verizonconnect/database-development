version: '3'

services:
    sqlserver:
        build: ${image}
        container_name: ${container_name}
        environment:
          - ACCEPT_EULA=Y
          - SA_PASSWORD=${password}
        ports:
          - ${host_port}:1433
        restart: always
        healthcheck:
          test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U ${user} -P ${password} -Q 'SELECT 1' || exit 1"]
          interval: 5s
          retries: 5
          start_period: 5s
          timeout: 3s
    sqlserver.configurator:
        build: ${image}
        volumes:
          - ./init:/docker-entrypoint-initdb.d
        depends_on:
            sqlserver:
                condition: service_healthy
        command: /opt/mssql-tools/bin/sqlcmd -S sqlserver -U ${user} -P ${password} -d master -Q "IF DB_ID('${database_name}') IS NULL CREATE DATABASE [${database_name}];" 
    lint:
        image: ${sqlfluff_image}
        command: lint --write-output /lint/sqlfluff.output
        volumes:
          - ./src/:/sql
          - ./lint/:/lint/
        depends_on:
            sqlserver:
                condition: service_healthy
    flyway:
        image: ${flyway_image}
        command: migrate
        environment:
          - FLYWAY_URL=jdbc:sqlserver://${container_name}:1433;DatabaseName=${database_name};trustServerCertificate=true;
          - FLYWAY_USER=${user}
          - FLYWAY_PASSWORD=${password}
          - FLYWAY_DEFAULT_SCHEMA=${default_schema}
          - FLYWAY_SQL_MIGRATION_PREFIX=${sql_migration_prefix}
          - FLYWAY_REPEATABLE_SQL_MIGRATION_PREFIX=${repeatable_sql_migration_prefix}
          - FLYWAY_MIXED=${mixed}
          - FLYWAY_PLACEHOLDERS_environment_name=${environment_name}
          - FLYWAY_PLACEHOLDERS_database_compatibility=${database_compatibility}
          - FLYWAY_PLACEHOLDERS_database_scoped_config_legacy_cardinality_estimation=${database_scoped_config_legacy_cardinality_estimation}
          - FLYWAY_PLACEHOLDERS_database_scoped_config_query_optimizer_hotfixes=${database_scoped_config_query_optimizer_hotfixes}
          - FLYWAY_PLACEHOLDERS_database_scoped_config_parameter_sniffing=${database_scoped_config_parameter_sniffing}
          - FLYWAY_PLACEHOLDERS_database_scoped_config_maxdop=${database_scoped_config_maxdop}
          - FLYWAY_PLACEHOLDERS_database_recovery=${database_recovery}
          - FLYWAY_PLACEHOLDERS_database_data_path=${database_data_path}
          - FLYWAY_PLACEHOLDERS_database_data_size=${database_data_size}
          - FLYWAY_PLACEHOLDERS_database_data_growth=${database_data_growth}
        volumes:
          - ./src/:/flyway/sql
        depends_on:
            lint:
                condition: "service_completed_successfully"
    unit_test:
        image: ${flyway_image}
        command: migrate
        environment:
          - FLYWAY_URL=jdbc:sqlserver://${container_name}:1433;DatabaseName=${database_name};trustServerCertificate=true;
          - FLYWAY_USER=${user}
          - FLYWAY_PASSWORD=${password}
          - FLYWAY_DEFAULT_SCHEMA=build_test
          - FLYWAY_SQL_MIGRATION_PREFIX=${sql_migration_prefix}
          - FLYWAY_REPEATABLE_SQL_MIGRATION_PREFIX=${repeatable_sql_migration_prefix}
        volumes:
          - ./test/:/flyway/sql
        depends_on:
            flyway:
                condition: "service_completed_successfully"
    sqlserver.coverage:
        build: ${image}
        volumes:
          - ./coverage:/opt/coverage
        depends_on:
            unit_test:
                condition: "service_completed_successfully"
        command: dotnet /opt/sqlcover/SQLServerCoverageCore.dll -c Get-CoverTSql -d ${database_name} -t ${coverage_timeout} -q "${coverage_command}" -e Export-Html -o "/opt/coverage" -k "Server=${container_name};User Id=${user};Password=${password};"
    # Example post deployment processing
    #sqlserver.test_results:
    #    build: ${image}
    #    depends_on:
    #        sqlserver.coverage:
    #            condition: "service_completed_successfully"
    #    command: /opt/mssql-tools/bin/sqlcmd -S sqlserver -U ${user} -P ${password} -d ${database_name} -Q "SELECT SUM(CASE WHEN Result = 'Success' THEN 1 ELSE 0 END) AS Success, SUM(CASE WHEN Result = 'Failure' THEN 1 ELSE 0 END) AS Failure, SUM(CASE WHEN Result = 'Error' THEN 1 ELSE 0 END) AS Error FROM tSQLt.TestResult;"

