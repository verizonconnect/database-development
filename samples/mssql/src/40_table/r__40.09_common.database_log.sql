/****** Object:  Table [common].[database_log]    Script Date: 16/11/2023 08:45:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID(N'[common].[database_log]', 'U') IS NULL
BEGIN
CREATE TABLE [common].[database_log](
    [database_log_id] [int] IDENTITY(1,1) NOT NULL,
    [post_time] [datetime] NOT NULL,
    [database_user] [sysname] NOT NULL,
    [event] [sysname] NOT NULL,
    [schema] [sysname] NULL,
    [object] [sysname] NULL,
    [tsql] [nvarchar](max) NOT NULL,
    [xml_event] [xml] NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
END
GO
IF NOT EXISTS (SELECT 1 FROM sys.fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'common', N'TABLE',N'database_log', N'COLUMN',N'database_log_id'))
    EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Primary key for database_log records.' , @level0type=N'SCHEMA',@level0name=N'common', @level1type=N'TABLE',@level1name=N'database_log', @level2type=N'COLUMN',@level2name=N'database_log_id'
GO
IF NOT EXISTS (SELECT 1 FROM sys.fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'common', N'TABLE',N'database_log', N'COLUMN',N'post_time'))
    EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date and time the DDL change occurred.' , @level0type=N'SCHEMA',@level0name=N'common', @level1type=N'TABLE',@level1name=N'database_log', @level2type=N'COLUMN',@level2name=N'post_time'
GO
IF NOT EXISTS (SELECT 1 FROM sys.fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'common', N'TABLE',N'database_log', N'COLUMN',N'database_user'))
    EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The user who implemented the DDL change.' , @level0type=N'SCHEMA',@level0name=N'common', @level1type=N'TABLE',@level1name=N'database_log', @level2type=N'COLUMN',@level2name=N'database_user'
GO
IF NOT EXISTS (SELECT 1 FROM sys.fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'common', N'TABLE',N'database_log', N'COLUMN',N'event'))
    EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of DDL statement that was executed.' , @level0type=N'SCHEMA',@level0name=N'common', @level1type=N'TABLE',@level1name=N'database_log', @level2type=N'COLUMN',@level2name=N'event'
GO
IF NOT EXISTS (SELECT 1 FROM sys.fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'common', N'TABLE',N'database_log', N'COLUMN',N'Schema'))
    EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The schema to which the changed object belongs.' , @level0type=N'SCHEMA',@level0name=N'common', @level1type=N'TABLE',@level1name=N'database_log', @level2type=N'COLUMN',@level2name=N'Schema'
GO
IF NOT EXISTS (SELECT 1 FROM sys.fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'common', N'TABLE',N'database_log', N'COLUMN',N'Object'))
    EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The object that was changed by the DDL statment.' , @level0type=N'SCHEMA',@level0name=N'common', @level1type=N'TABLE',@level1name=N'database_log', @level2type=N'COLUMN',@level2name=N'Object'
GO
IF NOT EXISTS (SELECT 1 FROM sys.fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'common', N'TABLE',N'database_log', N'COLUMN',N'TSQL'))
    EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The exact Transact-SQL statement that was executed.' , @level0type=N'SCHEMA',@level0name=N'common', @level1type=N'TABLE',@level1name=N'database_log', @level2type=N'COLUMN',@level2name=N'TSQL'
GO
IF NOT EXISTS (SELECT 1 FROM sys.fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'common', N'TABLE',N'database_log', N'COLUMN',N'xml_event'))
    EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The raw XML data generated by database trigger.' , @level0type=N'SCHEMA',@level0name=N'common', @level1type=N'TABLE',@level1name=N'database_log', @level2type=N'COLUMN',@level2name=N'xml_event'
GO
IF NOT EXISTS (SELECT 1 FROM sys.fn_listextendedproperty(N'MS_Description' , N'SCHEMA',N'common', N'TABLE',N'database_log', NULL,NULL))
    EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Audit table tracking all DDL changes made to the AdventureWorks database. Data is captured by the database trigger trg_ddl_database_log.' , @level0type=N'SCHEMA',@level0name=N'common', @level1type=N'TABLE',@level1name=N'database_log'
GO
